from ..broker import DataBroker
from ..muxer import DataMuxer


class StepScan(object):
    "Use the DataBroker interface to obtain step scan data as a DataFrame."

    def __init__(self):
        pass

    def __getitem__(self, val):
        headers = DataBroker[val]
        return _step_scan_df(headers)

    def find_headers(cls, **kwargs):
        """Given search criteria, find Headers describing runs.

        This function returns a list of dictionary-like objects encapsulating
        the metadata for a run -- start time, instruments uses, and so on.
        In addition to the Parameters below, advanced users can specifiy
        arbitrary queries that are passed through to mongodb.

        Parameters
        ----------
        start_time : float, optional
            timestamp of the earliest time that a RunStart was created
        stop_time : float, optional
            timestamp of the latest time that a RunStart was created
        beamline_id : str, optional
            String identifier for a specific beamline
        project : str, optional
            Project name
        owner : str, optional
            The username of the logged-in user when the scan was performed
        scan_id : int, optional
            Integer scan identifier
        uid : str, optional
            Globally unique id string provided to metadatastore
        _id : str or ObjectId, optional
            The unique id generated by mongo
        data_key : str, optional
            The alias (e.g., 'motor1') or PV identifier of data source

        Returns
        -------
        data : list
            Header objects

        Examples
        --------
        >>> find_headers(start_time=12345678)
        """
        headers = DataBroker.find_headers(**kwargs)
        return _step_scan_df(headers)


def _step_scan_df(headers):
    try:
        headers.items()
    except AttributeError:
        pass
    else:
        headers = [headers]
    data_keys = headers[0].event_descriptors[0].data_keys.keys()
    for header in headers:
        if len(header.event_descriptors) != 1:
            raise ValueError("The header {0} has asynchronous Events; "
                             "it cannot be automatically treated as a "
                             "step scan.".format(repr(header)))
        if header.event_descriptors[0].data_keys.keys() != data_keys:
            raise ValueError("Data keys for header {0} do not match "
                             "data keys for header {1}. All headers "
                             "must have the same data keys to be part "
                             "of the same StepScan.".format(
                                 repr(header), repr(headers[0])))
    events = DataBroker.fetch_events(headers)
    dm = DataMuxer.from_events(events)
    return dm.to_sparse_dataframe()
