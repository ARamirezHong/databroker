"""Enaml definitions for the search views"""

import six

from enaml.widgets.api import (Container, RadioButton, PushButton, Window,
                               ScrollArea, Form, Label, GroupBox, SpinBox,
                               Html, Field, Timer)
from enaml.core.api import (Looper, Conditional, Include)
from enaml.stdlib.fields import IntField
from enaml.layout.api import (vbox, hbox, spacer, Box, grid, factory, align)
from ..core import TimerButton


def generate_grid(container, num_cols):
    """ Generate grid constraints with given number of columns.

    Notes
    -----
    Shamelessly copied from enaml/examples/layout/advanced/factory_func.enaml
    """
    rows = []
    widgets = container.visible_widgets()
    row_iters = (iter(widgets),) * num_cols
    rows = list(zip(*row_iters))
    return [grid(*rows, row_spacing=0, column_spacing=0, row_align='v_center',
                 column_align='h_center'),
            align('width', *widgets)]


enamldef DisplaySummary(Container):
    """Enaml definition for the widget that displays a dictionary as a form
    """
    attr display_dict
    Form:
        padding = Box(0, 0, 0, 0)
        row_spacing = 0
        Looper:
            iterable << sorted(display_dict)
            Label:
                text = loop_item
            Field:
                text = str(display_dict[loop_item])
                read_only = True


enamldef WatchForHeadersView(Container):
    """Enaml definition for the widget that displays the controls for
    how frequently databroker will be asked for its most recent header
    """
    attr watch_headers_model

    Container:
        padding = Box(0, 0, 0, 0)
        constraints = [vbox(hbox(refresh_button, update_input),
                            search_info)]
        Timer: the_timer:
            interval << watch_headers_model.update_rate
            single_shot = False
            timeout ::
                watch_headers_model.check_header()
        TimerButton: refresh_button:
            checked := watch_headers_model.auto_update
            timer = the_timer
            text = "Automatically update data"
            tool_tip = ("If checked, poll the databroker for new runs at the"
                       "rate specified in the box to the right")
        SpinBox: update_input:
            minimum = 1000
            maximum = 3600000
            #special_value_text = 'Autotune'
            value := watch_headers_model.update_rate
            suffix = ' ms'
            single_step << value / 100
        Label: search_info:
            text << watch_headers_model.search_info


enamldef GetLastView(Container):
    """Enaml definition for the widget that displays the controls for
    searching the dataportal for the last N runs
    """
    attr get_last_model
    Container:
        padding = Box(0, 0, 0, 0)
        constraints = [vbox(num_runs, search_info, headers)]

        # GUI element that selects the number of run headers to display
        SpinBox: num_runs:
            prefix = "Display "
            suffix = " run(s)"
            minimum = 1
            value := get_last_model.num_to_retrieve
        # GUI element that provides search stats
        Label: search_info:
            text << get_last_model.search_info
        # GUI element that allows for different runs to be selected
        Container: headers:
            Looper:
                iterable << get_last_model.headers
                RadioButton:
                    text = '{}: {}'.format(
                        loop_item.scan_id, loop_item.start_datetime)
                    clicked ::
                        get_last_model.header = loop_item

enamldef DisplayHeaderView(Container):
    attr display_header_model
    Container:
        padding = Box(0, 0, 0, 0)
        # GUI Element to show a Run Summary and the corresponding Data Keys
        GroupBox: run_summary:
            #visible := get_last_model.summary_visible
            padding = Box(0, 0, 0, 0)
            title = "Run Summary"
            flat = True
            DisplaySummary:
                padding = Box(0, 0, 0, 0)
                display_dict << display_header_model.header_as_dict
            GroupBox:
                padding = Box(0, 0, 0, 0)
                title = "Data Key Information"
                flat = True
                Container:
                    padding = Box(0, 0, 0, 0)
                    constraints << [factory(generate_grid, 3)]
                    Include:
                        objects << gen_objects(display_header_model.header_keys)

def gen_objects(keys):
    try:
        headers = keys[0]
    except IndexError:
        return []
    objs = [Label(text=headers[0]), Label(text=headers[1]),
            Label(text=headers[2])]
    for key in keys[1:]:
        objs.append(Label(text = key[0]))
        objs.append(Label(text = key[1]))
        objs.append(Field(text=key[2], read_only=True))
    return objs

enamldef GetLastWindow(Window): window:
    title = "Get Last"
    attr get_last_model
    GetLastView:
        get_last_model = window.get_last_model
