
""" The Enaml UI code for the scalar viewer

"""

from enaml.core.api import Looper
from atom.api import Atom, List, observe, Bool, Enum, Str, Int
from enaml.layout.api import vbox, hbox, spacer, grid, HSplitLayout, Box, spacer
from enaml.widgets.api import (Window, Container, DockArea, MPLCanvas,
                               CheckBox, DockItem, DockPane, Form, Label,
                               Slider, MainWindow, ComboBox, SpinBox,
                               GroupBox, ScrollArea, PushButton, RadioButton,
                               Field,
                               )
from enaml.stdlib.fields import FloatField
from .model import ScalarCollection, ScalarConfig
import random
import six

enamldef PlotControls(Container):
    attr scalar_collection
    limit_width = 'string'
    ScrollArea: scroller:
        Container:
            padding = Box(0, 0, 0, 0)
            GroupBox: plot:
                title_align = 'center'
                title = 'Plot'
                padding = Box(0, 0, 0, 0)
                Form:
                    row_spacing = 0
                    Label:
                        text = "X axis"
                    ComboBox: x_axis:
                        items << list(scalar_collection.data_cols)
                        editable = True
                        index = 0
                        selected_item >> scalar_collection.x
                        enabled << not scalar_collection.x_is_time
                    Label:
                        text = "X axis options"
                    Form:
                        row_spacing = 0
                        CheckBox: btn_time:
                            text = 'Plot againt time'
                            checked := scalar_collection.x_is_time
                    Label:
                        text = "Dataset to fit"
                    ComboBox: cmb_fit:
                        items << list(scalar_collection.data_cols)
                        editable = True
                        index = 0
                        enabled = False
                    Label:
                        text = "Dataset to estimate"
                    ComboBox: cmb_est:
                        items << list(scalar_collection.data_cols)
                        index << scalar_collection.estimate_index
                        enabled = True
                        selected_item >> scalar_collection.estimate_target
                    Label:
                        text = "Y axis"
                    Label:
                        pass
                GroupBox: measured:
                    padding = Box(0, 0, 0, 0)
                    title = "Measured Data"
                    Form:
                        row_spacing = 0
                        Looper: looper:
                            iterable << scalar_collection.data_cols
                            PushButton: cb_plot:
                                text = loop_item
                                checkable = True
                                checked := scalar_collection.scalar_models[loop_item].is_plotting
                                clicked ::
                                    if loop_item != 'peak stats' and loop_item != 'fit':
                                        scalar_collection.estimate_target = loop_item
                            Label:
                                text << str(id(scalar_collection.scalar_models[loop_item]))
            GroupBox: estimate:
                title_align = 'center'
                title = 'Estimate'
                padding = Box(0, 0, 0, 0)
                Form:
                    row_spacing = 0
                    Looper: looper:
                        iterable << list(six.iterkeys(scalar_collection.estimate_stats))
                        Label:
                            text = '{}: {}'.format(loop_item,
                                scalar_collection.estimate_stats[loop_item])
                        PushButton:
                            text = 'Plot'
                            checkable = True
                            checked = loop_item in scalar_collection.estimate_plot
                            clicked ::
                                if checked:
                                    scalar_collection.estimate_plot.append(loop_item)
                                else:
                                    try:
                                        scalar_collection.estimate_plot.remove(loop_item)
                                    except ValueError:
                                        # loop_item is not in the list
                                        pass
                                scalar_collection.reformat_view()


enamldef PlotView(Container):
    Container:
        constraints = [
            vbox(
                hbox(check, spacer, fit),
                #vbox(canvas, fitter),
                vbox(canvas),
            ),
        ]
        CheckBox: check:
            text = 'Toolbar Visible'
            enabled = False
            checked := canvas.toolbar_visible
        CheckBox: fit:
            text = 'Fitting Visible'
            #checked := fitter.show_fit
        MPLCanvas: canvas:
            figure << scalar_collection._fig
            toolbar_visible = True


enamldef ScalarContainer(Window): window:
    attr scalar_collection
    Container:
        DockArea: da:
            layout = HSplitLayout('controls', 'view')
            DockItem:
                name = 'view'
                title = 'Scalar Plot View'
                Container:
                    PlotView: contains:
                        pass
            DockItem:
                name = 'controls'
                title = 'Scalar Plot Controls'
                Container:
                    PlotControls: controls:
                        pass
