__author__ = 'arkilic'
import requests
import simplejson

#The client lives in the service for now. I will move it to separate repo once ready for alpha release


data_dump = simplejson.dumps({'key':"arman"})
r = requests.post("http://127.0.0.1:7777/run_start", data=data_dump)
if r.status_code == 200:
    print("Success")
else:
    print("Tanked", r.status_code, r.text)


def find_run_starts(**kwargs):
    """Given search criteria, locate RunStart Documents.
    As we describe in design document, time here is strictly the time
    server entry was created, not IOC timestamp. For the difference, refer
    to: nsls-ii.github.io
    Parameters
    ----------
    start_time : time-like, optional
        time-like representation of the earliest time that a RunStart
        was created. Valid options are:
           - timestamps --> time.time()
           - '2015'
           - '2015-01'
           - '2015-01-30'
           - '2015-03-30 03:00:00'
           - datetime.datetime.now()
    stop_time : time-like, optional
        timestamp of the latest time that a RunStart was created. See
        docs for `start_time` for examples.
    beamline_id : str, optional
        String identifier for a specific beamline
    project : str, optional
        Project name
    owner : str, optional
        The username of the logged-in user when the scan was performed
    scan_id : int, optional
        Integer scan identifier
    uid : str, optional
        Globally unique id string provided to metadatastore
    _id : str or ObjectId, optional
        The unique id generated by mongo

    Returns
    -------
    rs_objects : iterable of metadatastore.document.Document objects

    Note
    ----
    All documents that the RunStart Document points to are dereferenced.
    These include RunStop, BeamlineConfig, and Sample.

    Examples
    --------
    >>> find_run_starts(scan_id=123)
    >>> find_run_starts(owner='arkilic')
    >>> find_run_starts(start_time=1421176750.514707, stop_time=time.time()})
    >>> find_run_starts(start_time=1421176750.514707, stop_time=time.time())
    >>> find_run_starts(owner='arkilic', start_time=1421176750.514707,
    ...                stop_time=time.time())

    """
    #TODO: r should be a generator and should return 50 documents at a time. Currently, returns everything
    # 1. Get the number of documents from server?
    # 2. Generate the iterator for querying
    # 3. When next() is called, return the next set of documents
    # 4. If out of range, kill generator


    print(kwargs)
    r = requests.get("http://127.0.0.1:7777/run_start", params=simplejson.dumps(kwargs))


def find_run_stops():
    pass

def find_events():
    pass

def find_last():
    pass

def find_beamline_configs():
    pass

def find_event_descriptors():
    pass

def insert_event():
    pass

def insert_event_descriptor():
    pass

def insert_run_start():
    pass

def insert_run_stop():
    pass

def insert_beamline_config():
    pass

def format_events():
    pass

def format_data_keys():
    pass

def db_connect():
    pass

def db_disconnect():
    pass

find_run_starts()